{"ast":null,"code":"var _jsxFileName = \"/home/calendar/Documents/molndal/fullstackCalendar/frontend/src/routes/Routing.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { RegisterView } from '../view/RegisterView';\nimport { HomeView } from '../view/HomeView';\nimport { SignInView } from '../view/SignInView';\nimport { UserContext } from '../shared/global/provider/UserProvider';\nimport { ProfileView } from '../view/ProfileView';\nimport { SettingsView } from '../view/SettingsView';\nimport { BookingView } from '../view/BookingView';\nimport RoutingPath from './RoutingPath';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Routing = props => {\n  _s();\n\n  const [authenticatedUser, setAuthenticatedUser] = useContext(UserContext);\n\n  const blockRouteIfAuthenticated = navigateToView => {\n    return authenticatedUser ? HomeView : navigateToView;\n  };\n\n  const blockRouteIfNotAuthenticated = navigateToView => {\n    return !authenticatedUser ? SignInView : navigateToView;\n  };\n\n  const checkIfUserIsAuthenticatedInBrowser = () => {\n    setAuthenticatedUser(localStorage.getItem(\"username\"));\n  };\n\n  useEffect(() => {\n    checkIfUserIsAuthenticatedInBrowser();\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [props.children, /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: RoutingPath.registerView,\n        component: blockRouteIfAuthenticated(RegisterView)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: RoutingPath.signInView,\n        component: blockRouteIfAuthenticated(SignInView)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: RoutingPath.profileView,\n        component: blockRouteIfNotAuthenticated(ProfileView)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: RoutingPath.bookingView,\n        component: blockRouteIfNotAuthenticated(BookingView)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: RoutingPath.settingsView,\n        component: blockRouteIfNotAuthenticated(SettingsView)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        component: HomeView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Routing, \"A0n5W0QO6l4j/sMusfNbpt5pQsc=\");\n\n_c = Routing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Routing\");","map":{"version":3,"sources":["/home/calendar/Documents/molndal/fullstackCalendar/frontend/src/routes/Routing.js"],"names":["React","useEffect","useContext","BrowserRouter","Router","Switch","Route","RegisterView","HomeView","SignInView","UserContext","ProfileView","SettingsView","BookingView","RoutingPath","Routing","props","authenticatedUser","setAuthenticatedUser","blockRouteIfAuthenticated","navigateToView","blockRouteIfNotAuthenticated","checkIfUserIsAuthenticatedInBrowser","localStorage","getItem","children","registerView","signInView","profileView","bookingView","settingsView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAGA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4ChB,UAAU,CAACQ,WAAD,CAA5D;;AAEA,QAAMS,yBAAyB,GAAIC,cAAD,IAAoB;AACrD,WAAOH,iBAAiB,GAAGT,QAAH,GAAcY,cAAtC;AACA,GAFD;;AAIA,QAAMC,4BAA4B,GAAID,cAAD,IAAoB;AACxD,WAAO,CAACH,iBAAD,GAAqBR,UAArB,GAAkCW,cAAzC;AACA,GAFD;;AAIA,QAAME,mCAAmC,GAAG,MAAM;AACjDJ,IAAAA,oBAAoB,CAACK,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAApB;AACA,GAFD;;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACfqB,IAAAA,mCAAmC;AACnC,GAFQ,CAAT;AAIA,sBACC,QAAC,MAAD;AAAA,eACEN,KAAK,CAACS,QADR,eAEC,QAAC,MAAD;AAAA,8BACC,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAEX,WAAW,CAACY,YAA/B;AAA6C,QAAA,SAAS,EAAEP,yBAAyB,CAACZ,YAAD;AAAjF;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAEO,WAAW,CAACa,UAA/B;AAA2C,QAAA,SAAS,EAAER,yBAAyB,CAACV,UAAD;AAA/E;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAEK,WAAW,CAACc,WAA/B;AAA4C,QAAA,SAAS,EAAEP,4BAA4B,CAACV,WAAD;AAAnF;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAEG,WAAW,CAACe,WAA/B;AAA4C,QAAA,SAAS,EAAER,4BAA4B,CAACR,WAAD;AAAnF;AAAA;AAAA;AAAA;AAAA,cAJD,eAMC,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAEC,WAAW,CAACgB,YAA/B;AAA6C,QAAA,SAAS,EAAET,4BAA4B,CAACT,YAAD;AAApF;AAAA;AAAA;AAAA;AAAA,cAND,eAOC,QAAC,KAAD;AAAO,QAAA,SAAS,EAAEJ;AAAlB;AAAA;AAAA;AAAA;AAAA,cAPD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAcA,CAjCM;;GAAMO,O;;KAAAA,O","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { RegisterView } from '../view/RegisterView'\nimport { HomeView } from '../view/HomeView'\nimport { SignInView } from '../view/SignInView'\nimport { UserContext } from '../shared/global/provider/UserProvider'\nimport { ProfileView } from '../view/ProfileView'\nimport { SettingsView } from '../view/SettingsView'\nimport {BookingView} from '../view/BookingView'\nimport RoutingPath from './RoutingPath'\n\n\nexport const Routing = (props) => {\n\tconst [authenticatedUser, setAuthenticatedUser] = useContext(UserContext)\n\n\tconst blockRouteIfAuthenticated = (navigateToView) => {\n\t\treturn authenticatedUser ? HomeView : navigateToView\n\t}\n\n\tconst blockRouteIfNotAuthenticated = (navigateToView) => {\n\t\treturn !authenticatedUser ? SignInView : navigateToView\n\t}\n\n\tconst checkIfUserIsAuthenticatedInBrowser = () => {\n\t\tsetAuthenticatedUser(localStorage.getItem(\"username\"))\n\t}\n\n\tuseEffect(() => {\n\t\tcheckIfUserIsAuthenticatedInBrowser()\n\t})\n\n\treturn (\n\t\t<Router>\n\t\t\t{props.children}\n\t\t\t<Switch>\n\t\t\t\t<Route exact path={RoutingPath.registerView} component={blockRouteIfAuthenticated(RegisterView)} />\n\t\t\t\t<Route exact path={RoutingPath.signInView} component={blockRouteIfAuthenticated(SignInView)} />\n\t\t\t\t<Route exact path={RoutingPath.profileView} component={blockRouteIfNotAuthenticated(ProfileView)} />\n\t\t\t\t<Route exact path={RoutingPath.bookingView} component={blockRouteIfNotAuthenticated(BookingView)} />\n\n\t\t\t\t<Route exact path={RoutingPath.settingsView} component={blockRouteIfNotAuthenticated(SettingsView)} />\n\t\t\t\t<Route component={HomeView} />\n\t\t\t</Switch>\n\t\t</Router>\n\t)\n}"]},"metadata":{},"sourceType":"module"}